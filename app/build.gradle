import com.mikepenz.aboutlibraries.plugin.DuplicateMode
import com.mikepenz.aboutlibraries.plugin.DuplicateRule
import com.mikepenz.aboutlibraries.plugin.StrictMode

plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.jetbrainsCompose)
    alias(libs.plugins.composeCompiler)
}
apply plugin: 'kotlin-android'
apply plugin: 'com.mikepenz.aboutlibraries.plugin' // has to be applied AFTER android

if (getSigningFile() != null) {
    apply from: "${getSigningFile()}"
}

android {
    compileSdk = libs.versions.compileSdk.get().toInteger()
    namespace = "com.mikepenz.aboutlibraries.sample"

    defaultConfig {
        minSdk = libs.versions.minSdk.get().toInteger()
        targetSdk = libs.versions.targetSdk.get().toInteger()
        versionName VERSION_NAME
        versionCode Integer.parseInt(VERSION_CODE)
        multiDexEnabled true

        setProperty("archivesBaseName", "AboutLibraries-v$versionName-c$versionCode")
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            if (getSigningFile() != null) {
                signingConfig signingConfigs.debug
            }
            minifyEnabled false
        }
        release {
            if (getSigningFile() != null) {
                signingConfig signingConfigs.release
            }
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        staging {
            if (getSigningFile() != null) {
                signingConfig signingConfigs.release
            }
            applicationIdSuffix ".debugStaging"
            matchingFallbacks = ['debug']
        }
    }
    productFlavors {
    }

    lintOptions {
        abortOnError false
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    buildFeatures {
        compose = true
    }

    packagingOptions {
        exclude 'META-INF/library-core_release.kotlin_module'
        exclude 'META-INF/library_release.kotlin_module'
    }
}

// It is possible to define a custom config path with custom mappings
aboutLibraries {
    // - if the automatic registered android tasks are disabled, a similar thing can be achieved manually
    // - `./gradlew app:exportLibraryDefinitions -PaboutLibraries.exportPath=src/main/res/raw`
    // - the resulting file can for example be added as part of the SCM
    // registerAndroidTasks = false

    // define the path configuration files are located in. E.g. additional libraries, licenses to add to the target .json
    configPath = "config"
    // allow to enable "offline mode", will disable any network check of the plugin (including [fetchRemoteLicense] or pulling spdx license texts)
    offlineMode = false
    // enable fetching of "remote" licenses. Uses the GitHub API
    fetchRemoteLicense = true
    // (optional) GitHub token to raise API request limit to allow fetching more licenses
    gitHubApiToken = getLocalOrGlobalProperty("github.pat")

    // Full license text for license IDs mentioned here will be included, even if no detected dependency uses them.
    // additionalLicenses = ["mit", "mpl_2_0"]

    // Allows to exclude some fields from the generated meta data field.
    // excludeFields = ["developers", "funding"]

    // Define the strict mode, will fail if the project uses licenses not allowed
    // - This will only automatically fail for Android projects which have `registerAndroidTasks` enabled
    // For non Android projects, execute `exportLibraryDefinitions`
    strictMode = StrictMode.FAIL
    // Allowed set of licenses, this project will be able to use without build failure
    allowedLicenses = ["Apache-2.0"]
    // Allowed set of licenses for specific dependencies, this project will be able to use without build failure
    allowedLicensesMap = ["asdkl": ["androidx.jetpack.library"], "NOASSERTION": ["org.jetbrains.kotlinx"]]
    // Enable the duplication mode, allows to merge, or link dependencies which relate
    duplicationMode = DuplicateMode.LINK
    // Configure the duplication rule, to match "duplicates" with
    duplicationRule = DuplicateRule.SIMPLE
    // Enable pretty printing for the generated JSON file
    prettyPrint = true

    // Allows to only collect dependencies of specific variants during the `collectDependencies` step.
    // filterVariants = ["debug"]
}

dependencies {
    implementation project(':aboutlibraries-core')
    implementation project(':aboutlibraries')
    implementation project(':aboutlibraries-compose-m2')
    implementation project(':aboutlibraries-compose-m3')

    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.cardView)
    implementation(libs.androidx.recyclerView)

    implementation(libs.google.material)
    implementation(libs.compose.androidx.icons)

    implementation(libs.bundles.accompanist)

    implementation(libs.bundles.compose.androidx)

    //used to generate the drawer on the left
    //https://github.com/mikepenz/MaterialDrawer
    implementation(libs.materialDrawer.core)

    //used to provide different itemAnimators for the RecyclerView
    //https://github.com/mikepenz/ItemAnimators
    implementation(libs.itemAnimators.core)

    // used to provide out of the box icon font support. simplifies development,
    // and provides scalable icons. the core is very very light
    // https://github.com/mikepenz/Android-Iconics
    implementation(libs.iconics.core)

    //used to display the icons in the drawer
    //https://github.com/mikepenz/Android-Iconicsx`
    implementation("com.mikepenz:material-design-iconic-typeface:2.2.0.8-kotlin@aar")

    // used only tho showcase multi flavor support
    stagingImplementation(libs.okhttp.core)
}

configurations.configureEach {
    resolutionStrategy.force(libs.fastAdapter.core)
    resolutionStrategy.force(libs.iconics.core)
}