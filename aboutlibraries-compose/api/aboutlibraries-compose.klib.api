// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, macosArm64, macosX64, wasmJs]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <AboutLibraries:aboutlibraries-compose>
abstract interface com.mikepenz.aboutlibraries.ui.compose/ChipColors { // com.mikepenz.aboutlibraries.ui.compose/ChipColors|null[0]
    abstract val containerColor // com.mikepenz.aboutlibraries.ui.compose/ChipColors.containerColor|{}containerColor[0]
        abstract fun <get-containerColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/ChipColors.containerColor.<get-containerColor>|<get-containerColor>(){}[0]
    abstract val contentColor // com.mikepenz.aboutlibraries.ui.compose/ChipColors.contentColor|{}contentColor[0]
        abstract fun <get-contentColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/ChipColors.contentColor.<get-contentColor>|<get-contentColor>(){}[0]
}

abstract interface com.mikepenz.aboutlibraries.ui.compose/ChipPadding { // com.mikepenz.aboutlibraries.ui.compose/ChipPadding|null[0]
    abstract val containerPadding // com.mikepenz.aboutlibraries.ui.compose/ChipPadding.containerPadding|{}containerPadding[0]
        abstract fun <get-containerPadding>(): androidx.compose.foundation.layout/PaddingValues // com.mikepenz.aboutlibraries.ui.compose/ChipPadding.containerPadding.<get-containerPadding>|<get-containerPadding>(){}[0]
    abstract val contentPadding // com.mikepenz.aboutlibraries.ui.compose/ChipPadding.contentPadding|{}contentPadding[0]
        abstract fun <get-contentPadding>(): androidx.compose.foundation.layout/PaddingValues // com.mikepenz.aboutlibraries.ui.compose/ChipPadding.contentPadding.<get-contentPadding>|<get-contentPadding>(){}[0]
}

abstract interface com.mikepenz.aboutlibraries.ui.compose/LibraryColors { // com.mikepenz.aboutlibraries.ui.compose/LibraryColors|null[0]
    abstract val dialogBackgroundColor // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.dialogBackgroundColor|{}dialogBackgroundColor[0]
        abstract fun <get-dialogBackgroundColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.dialogBackgroundColor.<get-dialogBackgroundColor>|<get-dialogBackgroundColor>(){}[0]
    abstract val dialogConfirmButtonColor // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.dialogConfirmButtonColor|{}dialogConfirmButtonColor[0]
        abstract fun <get-dialogConfirmButtonColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.dialogConfirmButtonColor.<get-dialogConfirmButtonColor>|<get-dialogConfirmButtonColor>(){}[0]
    abstract val dialogContentColor // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.dialogContentColor|{}dialogContentColor[0]
        abstract fun <get-dialogContentColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.dialogContentColor.<get-dialogContentColor>|<get-dialogContentColor>(){}[0]
    abstract val fundingChipColors // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.fundingChipColors|{}fundingChipColors[0]
        abstract fun <get-fundingChipColors>(): com.mikepenz.aboutlibraries.ui.compose/ChipColors // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.fundingChipColors.<get-fundingChipColors>|<get-fundingChipColors>(){}[0]
    abstract val libraryBackgroundColor // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.libraryBackgroundColor|{}libraryBackgroundColor[0]
        abstract fun <get-libraryBackgroundColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.libraryBackgroundColor.<get-libraryBackgroundColor>|<get-libraryBackgroundColor>(){}[0]
    abstract val libraryContentColor // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.libraryContentColor|{}libraryContentColor[0]
        abstract fun <get-libraryContentColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.libraryContentColor.<get-libraryContentColor>|<get-libraryContentColor>(){}[0]
    abstract val licenseChipColors // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.licenseChipColors|{}licenseChipColors[0]
        abstract fun <get-licenseChipColors>(): com.mikepenz.aboutlibraries.ui.compose/ChipColors // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.licenseChipColors.<get-licenseChipColors>|<get-licenseChipColors>(){}[0]
    abstract val versionChipColors // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.versionChipColors|{}versionChipColors[0]
        abstract fun <get-versionChipColors>(): com.mikepenz.aboutlibraries.ui.compose/ChipColors // com.mikepenz.aboutlibraries.ui.compose/LibraryColors.versionChipColors.<get-versionChipColors>|<get-versionChipColors>(){}[0]
}

abstract interface com.mikepenz.aboutlibraries.ui.compose/LibraryDimensions { // com.mikepenz.aboutlibraries.ui.compose/LibraryDimensions|null[0]
    abstract val chipMinHeight // com.mikepenz.aboutlibraries.ui.compose/LibraryDimensions.chipMinHeight|{}chipMinHeight[0]
        abstract fun <get-chipMinHeight>(): androidx.compose.ui.unit/Dp // com.mikepenz.aboutlibraries.ui.compose/LibraryDimensions.chipMinHeight.<get-chipMinHeight>|<get-chipMinHeight>(){}[0]
    abstract val itemSpacing // com.mikepenz.aboutlibraries.ui.compose/LibraryDimensions.itemSpacing|{}itemSpacing[0]
        abstract fun <get-itemSpacing>(): androidx.compose.ui.unit/Dp // com.mikepenz.aboutlibraries.ui.compose/LibraryDimensions.itemSpacing.<get-itemSpacing>|<get-itemSpacing>(){}[0]
}

abstract interface com.mikepenz.aboutlibraries.ui.compose/LibraryPadding { // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding|null[0]
    abstract val contentPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.contentPadding|{}contentPadding[0]
        abstract fun <get-contentPadding>(): androidx.compose.foundation.layout/PaddingValues // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.contentPadding.<get-contentPadding>|<get-contentPadding>(){}[0]
    abstract val fundingPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.fundingPadding|{}fundingPadding[0]
        abstract fun <get-fundingPadding>(): com.mikepenz.aboutlibraries.ui.compose/ChipPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.fundingPadding.<get-fundingPadding>|<get-fundingPadding>(){}[0]
    abstract val licenseDialogContentPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.licenseDialogContentPadding|{}licenseDialogContentPadding[0]
        abstract fun <get-licenseDialogContentPadding>(): androidx.compose.ui.unit/Dp // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.licenseDialogContentPadding.<get-licenseDialogContentPadding>|<get-licenseDialogContentPadding>(){}[0]
    abstract val licensePadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.licensePadding|{}licensePadding[0]
        abstract fun <get-licensePadding>(): com.mikepenz.aboutlibraries.ui.compose/ChipPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.licensePadding.<get-licensePadding>|<get-licensePadding>(){}[0]
    abstract val namePadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.namePadding|{}namePadding[0]
        abstract fun <get-namePadding>(): androidx.compose.foundation.layout/PaddingValues // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.namePadding.<get-namePadding>|<get-namePadding>(){}[0]
    abstract val versionPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.versionPadding|{}versionPadding[0]
        abstract fun <get-versionPadding>(): com.mikepenz.aboutlibraries.ui.compose/ChipPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.versionPadding.<get-versionPadding>|<get-versionPadding>(){}[0]
    abstract val verticalPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.verticalPadding|{}verticalPadding[0]
        abstract fun <get-verticalPadding>(): androidx.compose.ui.unit/Dp // com.mikepenz.aboutlibraries.ui.compose/LibraryPadding.verticalPadding.<get-verticalPadding>|<get-verticalPadding>(){}[0]
}

abstract interface com.mikepenz.aboutlibraries.ui.compose/LibraryShapes { // com.mikepenz.aboutlibraries.ui.compose/LibraryShapes|null[0]
    abstract val chipShape // com.mikepenz.aboutlibraries.ui.compose/LibraryShapes.chipShape|{}chipShape[0]
        abstract fun <get-chipShape>(): androidx.compose.ui.graphics/Shape // com.mikepenz.aboutlibraries.ui.compose/LibraryShapes.chipShape.<get-chipShape>|<get-chipShape>(){}[0]
}

abstract interface com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles { // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles|null[0]
    abstract val authorMaxLines // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.authorMaxLines|{}authorMaxLines[0]
        abstract fun <get-authorMaxLines>(): kotlin/Int // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.authorMaxLines.<get-authorMaxLines>|<get-authorMaxLines>(){}[0]
    abstract val authorTextStyle // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.authorTextStyle|{}authorTextStyle[0]
        abstract fun <get-authorTextStyle>(): androidx.compose.ui.text/TextStyle? // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.authorTextStyle.<get-authorTextStyle>|<get-authorTextStyle>(){}[0]
    abstract val defaultOverflow // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.defaultOverflow|{}defaultOverflow[0]
        abstract fun <get-defaultOverflow>(): androidx.compose.ui.text.style/TextOverflow // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.defaultOverflow.<get-defaultOverflow>|<get-defaultOverflow>(){}[0]
    abstract val descriptionMaxLines // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.descriptionMaxLines|{}descriptionMaxLines[0]
        abstract fun <get-descriptionMaxLines>(): kotlin/Int // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.descriptionMaxLines.<get-descriptionMaxLines>|<get-descriptionMaxLines>(){}[0]
    abstract val descriptionTextStyle // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.descriptionTextStyle|{}descriptionTextStyle[0]
        abstract fun <get-descriptionTextStyle>(): androidx.compose.ui.text/TextStyle? // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.descriptionTextStyle.<get-descriptionTextStyle>|<get-descriptionTextStyle>(){}[0]
    abstract val fundingTextStyle // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.fundingTextStyle|{}fundingTextStyle[0]
        abstract fun <get-fundingTextStyle>(): androidx.compose.ui.text/TextStyle? // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.fundingTextStyle.<get-fundingTextStyle>|<get-fundingTextStyle>(){}[0]
    abstract val licensesTextStyle // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.licensesTextStyle|{}licensesTextStyle[0]
        abstract fun <get-licensesTextStyle>(): androidx.compose.ui.text/TextStyle? // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.licensesTextStyle.<get-licensesTextStyle>|<get-licensesTextStyle>(){}[0]
    abstract val nameMaxLines // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.nameMaxLines|{}nameMaxLines[0]
        abstract fun <get-nameMaxLines>(): kotlin/Int // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.nameMaxLines.<get-nameMaxLines>|<get-nameMaxLines>(){}[0]
    abstract val nameOverflow // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.nameOverflow|{}nameOverflow[0]
        abstract fun <get-nameOverflow>(): androidx.compose.ui.text.style/TextOverflow // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.nameOverflow.<get-nameOverflow>|<get-nameOverflow>(){}[0]
    abstract val nameTextStyle // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.nameTextStyle|{}nameTextStyle[0]
        abstract fun <get-nameTextStyle>(): androidx.compose.ui.text/TextStyle? // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.nameTextStyle.<get-nameTextStyle>|<get-nameTextStyle>(){}[0]
    abstract val versionMaxLines // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.versionMaxLines|{}versionMaxLines[0]
        abstract fun <get-versionMaxLines>(): kotlin/Int // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.versionMaxLines.<get-versionMaxLines>|<get-versionMaxLines>(){}[0]
    abstract val versionTextStyle // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.versionTextStyle|{}versionTextStyle[0]
        abstract fun <get-versionTextStyle>(): androidx.compose.ui.text/TextStyle? // com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles.versionTextStyle.<get-versionTextStyle>|<get-versionTextStyle>(){}[0]
}

final class com.mikepenz.aboutlibraries.ui.compose/DefaultChipColors : com.mikepenz.aboutlibraries.ui.compose/ChipColors { // com.mikepenz.aboutlibraries.ui.compose/DefaultChipColors|null[0]
    constructor <init>(androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color) // com.mikepenz.aboutlibraries.ui.compose/DefaultChipColors.<init>|<init>(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color){}[0]

    final val containerColor // com.mikepenz.aboutlibraries.ui.compose/DefaultChipColors.containerColor|{}containerColor[0]
        final fun <get-containerColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/DefaultChipColors.containerColor.<get-containerColor>|<get-containerColor>(){}[0]
    final val contentColor // com.mikepenz.aboutlibraries.ui.compose/DefaultChipColors.contentColor|{}contentColor[0]
        final fun <get-contentColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/DefaultChipColors.contentColor.<get-contentColor>|<get-contentColor>(){}[0]
}

final class com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors : com.mikepenz.aboutlibraries.ui.compose/LibraryColors { // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors|null[0]
    constructor <init>(androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color, com.mikepenz.aboutlibraries.ui.compose/ChipColors, com.mikepenz.aboutlibraries.ui.compose/ChipColors, com.mikepenz.aboutlibraries.ui.compose/ChipColors, androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color, androidx.compose.ui.graphics/Color) // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.<init>|<init>(androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;com.mikepenz.aboutlibraries.ui.compose.ChipColors;com.mikepenz.aboutlibraries.ui.compose.ChipColors;com.mikepenz.aboutlibraries.ui.compose.ChipColors;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color;androidx.compose.ui.graphics.Color){}[0]

    final val dialogBackgroundColor // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.dialogBackgroundColor|{}dialogBackgroundColor[0]
        final fun <get-dialogBackgroundColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.dialogBackgroundColor.<get-dialogBackgroundColor>|<get-dialogBackgroundColor>(){}[0]
    final val dialogConfirmButtonColor // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.dialogConfirmButtonColor|{}dialogConfirmButtonColor[0]
        final fun <get-dialogConfirmButtonColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.dialogConfirmButtonColor.<get-dialogConfirmButtonColor>|<get-dialogConfirmButtonColor>(){}[0]
    final val dialogContentColor // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.dialogContentColor|{}dialogContentColor[0]
        final fun <get-dialogContentColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.dialogContentColor.<get-dialogContentColor>|<get-dialogContentColor>(){}[0]
    final val fundingChipColors // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.fundingChipColors|{}fundingChipColors[0]
        final fun <get-fundingChipColors>(): com.mikepenz.aboutlibraries.ui.compose/ChipColors // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.fundingChipColors.<get-fundingChipColors>|<get-fundingChipColors>(){}[0]
    final val libraryBackgroundColor // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.libraryBackgroundColor|{}libraryBackgroundColor[0]
        final fun <get-libraryBackgroundColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.libraryBackgroundColor.<get-libraryBackgroundColor>|<get-libraryBackgroundColor>(){}[0]
    final val libraryContentColor // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.libraryContentColor|{}libraryContentColor[0]
        final fun <get-libraryContentColor>(): androidx.compose.ui.graphics/Color // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.libraryContentColor.<get-libraryContentColor>|<get-libraryContentColor>(){}[0]
    final val licenseChipColors // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.licenseChipColors|{}licenseChipColors[0]
        final fun <get-licenseChipColors>(): com.mikepenz.aboutlibraries.ui.compose/ChipColors // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.licenseChipColors.<get-licenseChipColors>|<get-licenseChipColors>(){}[0]
    final val versionChipColors // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.versionChipColors|{}versionChipColors[0]
        final fun <get-versionChipColors>(): com.mikepenz.aboutlibraries.ui.compose/ChipColors // com.mikepenz.aboutlibraries.ui.compose/DefaultLibraryColors.versionChipColors.<get-versionChipColors>|<get-versionChipColors>(){}[0]
}

final object com.mikepenz.aboutlibraries.ui.compose/LibraryDefaults { // com.mikepenz.aboutlibraries.ui.compose/LibraryDefaults|null[0]
    final fun chipPadding(androidx.compose.foundation.layout/PaddingValues?, androidx.compose.foundation.layout/PaddingValues?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.aboutlibraries.ui.compose/ChipPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryDefaults.chipPadding|chipPadding(androidx.compose.foundation.layout.PaddingValues?;androidx.compose.foundation.layout.PaddingValues?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
    final fun libraryDimensions(androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.aboutlibraries.ui.compose/LibraryDimensions // com.mikepenz.aboutlibraries.ui.compose/LibraryDefaults.libraryDimensions|libraryDimensions(androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
    final fun libraryPadding(androidx.compose.foundation.layout/PaddingValues?, androidx.compose.foundation.layout/PaddingValues?, com.mikepenz.aboutlibraries.ui.compose/ChipPadding?, com.mikepenz.aboutlibraries.ui.compose/ChipPadding?, com.mikepenz.aboutlibraries.ui.compose/ChipPadding?, androidx.compose.ui.unit/Dp, androidx.compose.ui.unit/Dp, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.aboutlibraries.ui.compose/LibraryPadding // com.mikepenz.aboutlibraries.ui.compose/LibraryDefaults.libraryPadding|libraryPadding(androidx.compose.foundation.layout.PaddingValues?;androidx.compose.foundation.layout.PaddingValues?;com.mikepenz.aboutlibraries.ui.compose.ChipPadding?;com.mikepenz.aboutlibraries.ui.compose.ChipPadding?;com.mikepenz.aboutlibraries.ui.compose.ChipPadding?;androidx.compose.ui.unit.Dp;androidx.compose.ui.unit.Dp;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
    final fun libraryShapes(androidx.compose.ui.graphics/Shape?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int): com.mikepenz.aboutlibraries.ui.compose/LibraryShapes // com.mikepenz.aboutlibraries.ui.compose/LibraryDefaults.libraryShapes|libraryShapes(androidx.compose.ui.graphics.Shape?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
    final fun libraryTextStyles(androidx.compose.ui.text.style/TextOverflow, androidx.compose.ui.text/TextStyle?, kotlin/Int, androidx.compose.ui.text.style/TextOverflow, androidx.compose.ui.text/TextStyle?, kotlin/Int, androidx.compose.ui.text/TextStyle?, kotlin/Int, androidx.compose.ui.text/TextStyle?, kotlin/Int, androidx.compose.ui.text/TextStyle?, androidx.compose.ui.text/TextStyle?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int): com.mikepenz.aboutlibraries.ui.compose/LibraryTextStyles // com.mikepenz.aboutlibraries.ui.compose/LibraryDefaults.libraryTextStyles|libraryTextStyles(androidx.compose.ui.text.style.TextOverflow;androidx.compose.ui.text.TextStyle?;kotlin.Int;androidx.compose.ui.text.style.TextOverflow;androidx.compose.ui.text.TextStyle?;kotlin.Int;androidx.compose.ui.text.TextStyle?;kotlin.Int;androidx.compose.ui.text.TextStyle?;kotlin.Int;androidx.compose.ui.text.TextStyle?;androidx.compose.ui.text.TextStyle?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
}

final val com.mikepenz.aboutlibraries.ui.compose.util/author // com.mikepenz.aboutlibraries.ui.compose.util/author|@com.mikepenz.aboutlibraries.entity.Library{}author[0]
    final fun (com.mikepenz.aboutlibraries.entity/Library).<get-author>(): kotlin/String // com.mikepenz.aboutlibraries.ui.compose.util/author.<get-author>|<get-author>@com.mikepenz.aboutlibraries.entity.Library(){}[0]
final val com.mikepenz.aboutlibraries.ui.compose.util/htmlReadyLicenseContent // com.mikepenz.aboutlibraries.ui.compose.util/htmlReadyLicenseContent|@com.mikepenz.aboutlibraries.entity.Library{}htmlReadyLicenseContent[0]
    final fun (com.mikepenz.aboutlibraries.entity/Library).<get-htmlReadyLicenseContent>(): kotlin/String // com.mikepenz.aboutlibraries.ui.compose.util/htmlReadyLicenseContent.<get-htmlReadyLicenseContent>|<get-htmlReadyLicenseContent>@com.mikepenz.aboutlibraries.entity.Library(){}[0]
final val com.mikepenz.aboutlibraries.ui.compose.util/htmlReadyLicenseContent // com.mikepenz.aboutlibraries.ui.compose.util/htmlReadyLicenseContent|@com.mikepenz.aboutlibraries.entity.License{}htmlReadyLicenseContent[0]
    final fun (com.mikepenz.aboutlibraries.entity/License).<get-htmlReadyLicenseContent>(): kotlin/String? // com.mikepenz.aboutlibraries.ui.compose.util/htmlReadyLicenseContent.<get-htmlReadyLicenseContent>|<get-htmlReadyLicenseContent>@com.mikepenz.aboutlibraries.entity.License(){}[0]
final val com.mikepenz.aboutlibraries.ui.compose.util/strippedLicenseContent // com.mikepenz.aboutlibraries.ui.compose.util/strippedLicenseContent|@com.mikepenz.aboutlibraries.entity.Library{}strippedLicenseContent[0]
    final fun (com.mikepenz.aboutlibraries.entity/Library).<get-strippedLicenseContent>(): kotlin/String // com.mikepenz.aboutlibraries.ui.compose.util/strippedLicenseContent.<get-strippedLicenseContent>|<get-strippedLicenseContent>@com.mikepenz.aboutlibraries.entity.Library(){}[0]
final val com.mikepenz.aboutlibraries.ui.compose.util/strippedLicenseContent // com.mikepenz.aboutlibraries.ui.compose.util/strippedLicenseContent|@com.mikepenz.aboutlibraries.entity.License{}strippedLicenseContent[0]
    final fun (com.mikepenz.aboutlibraries.entity/License).<get-strippedLicenseContent>(): kotlin/String? // com.mikepenz.aboutlibraries.ui.compose.util/strippedLicenseContent.<get-strippedLicenseContent>|<get-strippedLicenseContent>@com.mikepenz.aboutlibraries.entity.License(){}[0]
final val com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_DefaultChipColors$stableprop // com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_DefaultChipColors$stableprop|#static{}com_mikepenz_aboutlibraries_ui_compose_DefaultChipColors$stableprop[0]
final val com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_DefaultLibraryColors$stableprop // com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_DefaultLibraryColors$stableprop|#static{}com_mikepenz_aboutlibraries_ui_compose_DefaultLibraryColors$stableprop[0]
final val com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_LibraryDefaults$stableprop // com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_LibraryDefaults$stableprop|#static{}com_mikepenz_aboutlibraries_ui_compose_LibraryDefaults$stableprop[0]

final fun com.mikepenz.aboutlibraries.ui.compose.layout/LibraryScaffoldLayout(kotlin/Function3<androidx.compose.foundation.layout/BoxScope, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, kotlin/Function3<androidx.compose.foundation.layout/BoxScope, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, kotlin/Function3<androidx.compose.foundation.layout/BoxScope, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, kotlin/Function3<androidx.compose.foundation.layout/BoxScope, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, kotlin/Function3<androidx.compose.foundation.layout/FlowRowScope, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, kotlin/Function3<androidx.compose.foundation.layout/FlowRowScope, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>, androidx.compose.ui/Modifier?, com.mikepenz.aboutlibraries.ui.compose/LibraryPadding?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int) // com.mikepenz.aboutlibraries.ui.compose.layout/LibraryScaffoldLayout|LibraryScaffoldLayout(kotlin.Function3<androidx.compose.foundation.layout.BoxScope,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<androidx.compose.foundation.layout.BoxScope,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<androidx.compose.foundation.layout.BoxScope,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<androidx.compose.foundation.layout.BoxScope,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<androidx.compose.foundation.layout.FlowRowScope,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;kotlin.Function3<androidx.compose.foundation.layout.FlowRowScope,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>;androidx.compose.ui.Modifier?;com.mikepenz.aboutlibraries.ui.compose.LibraryPadding?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.aboutlibraries.ui.compose/LibrariesScaffold(kotlinx.collections.immutable/ImmutableList<com.mikepenz.aboutlibraries.entity/Library>, androidx.compose.ui/Modifier?, androidx.compose.ui/Modifier?, androidx.compose.foundation.lazy/LazyListState?, androidx.compose.foundation.layout/PaddingValues?, com.mikepenz.aboutlibraries.ui.compose/LibraryPadding?, com.mikepenz.aboutlibraries.ui.compose/LibraryDimensions?, kotlin/Function4<androidx.compose.foundation.layout/BoxScope, kotlin/String, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function4<androidx.compose.foundation.layout/BoxScope, kotlin/String, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function4<androidx.compose.foundation.layout/BoxScope, kotlin/String, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function4<androidx.compose.foundation.layout/BoxScope, kotlin/String, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function4<androidx.compose.foundation.layout/FlowRowScope, com.mikepenz.aboutlibraries.entity/License, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function4<androidx.compose.foundation.layout/FlowRowScope, com.mikepenz.aboutlibraries.entity/Funding, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function4<androidx.compose.foundation.layout/FlowRowScope, com.mikepenz.aboutlibraries.entity/Library, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function1<androidx.compose.foundation.lazy/LazyListScope, kotlin/Unit>?, kotlin/Function3<androidx.compose.foundation.lazy/LazyItemScope, androidx.compose.runtime/Composer, kotlin/Int, kotlin/Unit>?, kotlin/Function1<androidx.compose.foundation.lazy/LazyListScope, kotlin/Unit>?, kotlin/Function1<com.mikepenz.aboutlibraries.entity/Library, kotlin/Boolean>?, androidx.compose.runtime/Composer?, kotlin/Int, kotlin/Int, kotlin/Int) // com.mikepenz.aboutlibraries.ui.compose/LibrariesScaffold|LibrariesScaffold(kotlinx.collections.immutable.ImmutableList<com.mikepenz.aboutlibraries.entity.Library>;androidx.compose.ui.Modifier?;androidx.compose.ui.Modifier?;androidx.compose.foundation.lazy.LazyListState?;androidx.compose.foundation.layout.PaddingValues?;com.mikepenz.aboutlibraries.ui.compose.LibraryPadding?;com.mikepenz.aboutlibraries.ui.compose.LibraryDimensions?;kotlin.Function4<androidx.compose.foundation.layout.BoxScope,kotlin.String,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function4<androidx.compose.foundation.layout.BoxScope,kotlin.String,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function4<androidx.compose.foundation.layout.BoxScope,kotlin.String,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function4<androidx.compose.foundation.layout.BoxScope,kotlin.String,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function4<androidx.compose.foundation.layout.FlowRowScope,com.mikepenz.aboutlibraries.entity.License,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function4<androidx.compose.foundation.layout.FlowRowScope,com.mikepenz.aboutlibraries.entity.Funding,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function4<androidx.compose.foundation.layout.FlowRowScope,com.mikepenz.aboutlibraries.entity.Library,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function1<androidx.compose.foundation.lazy.LazyListScope,kotlin.Unit>?;kotlin.Function3<androidx.compose.foundation.lazy.LazyItemScope,androidx.compose.runtime.Composer,kotlin.Int,kotlin.Unit>?;kotlin.Function1<androidx.compose.foundation.lazy.LazyListScope,kotlin.Unit>?;kotlin.Function1<com.mikepenz.aboutlibraries.entity.Library,kotlin.Boolean>?;androidx.compose.runtime.Composer?;kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_DefaultChipColors$stableprop_getter(): kotlin/Int // com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_DefaultChipColors$stableprop_getter|com_mikepenz_aboutlibraries_ui_compose_DefaultChipColors$stableprop_getter(){}[0]
final fun com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_DefaultLibraryColors$stableprop_getter(): kotlin/Int // com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_DefaultLibraryColors$stableprop_getter|com_mikepenz_aboutlibraries_ui_compose_DefaultLibraryColors$stableprop_getter(){}[0]
final fun com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_LibraryDefaults$stableprop_getter(): kotlin/Int // com.mikepenz.aboutlibraries.ui.compose/com_mikepenz_aboutlibraries_ui_compose_LibraryDefaults$stableprop_getter|com_mikepenz_aboutlibraries_ui_compose_LibraryDefaults$stableprop_getter(){}[0]
final fun com.mikepenz.aboutlibraries.ui.compose/rememberLibraries(kotlin.coroutines/SuspendFunction0<kotlin/String>, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.runtime/State<com.mikepenz.aboutlibraries/Libs?> // com.mikepenz.aboutlibraries.ui.compose/rememberLibraries|rememberLibraries(kotlin.coroutines.SuspendFunction0<kotlin.String>;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
final fun com.mikepenz.aboutlibraries.ui.compose/rememberLibraries(kotlin/ByteArray, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.runtime/State<com.mikepenz.aboutlibraries/Libs?> // com.mikepenz.aboutlibraries.ui.compose/rememberLibraries|rememberLibraries(kotlin.ByteArray;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
final fun com.mikepenz.aboutlibraries.ui.compose/rememberLibraries(kotlin/String, androidx.compose.runtime/Composer?, kotlin/Int): androidx.compose.runtime/State<com.mikepenz.aboutlibraries/Libs?> // com.mikepenz.aboutlibraries.ui.compose/rememberLibraries|rememberLibraries(kotlin.String;androidx.compose.runtime.Composer?;kotlin.Int){}[0]
