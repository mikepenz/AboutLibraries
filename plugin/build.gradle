buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72"
    }
}
plugins {
    id 'nu.studer.plugindev' version '1.0.12'
    id "com.gradle.plugin-publish" version "0.11.0"
}
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: "org.jetbrains.kotlin.jvm"

group = "com.mikepenz.aboutlibraries.plugin"
version = "8.3.0"

plugindev {
    pluginId "${project.group}"
    pluginImplementationClass "${project.group}.AboutLibrariesPlugin"
    pluginName 'AboutLibraries Library Gradle Plugin'
    pluginDescription 'Plugin to resolve all libraries used in an app for the AboutLibraries library to offer relevant information of used libraries.'
    pluginLicenses 'Apache-2.0'
    pluginTags 'gradle', 'plugin', 'android'
    authorId 'mikepenz'
    authorName 'Mike Penz'
    authorEmail 'mikepenz@gmail.com'
    projectUrl 'https://github.com/mikepenz/AboutLibraries'
    projectInceptionYear '2020'
    done() // do not omit this
}

pluginBundle {
    website = 'https://github.com/mikepenz/AboutLibraries'
    vcsUrl = 'https://github.com/mikepenz/AboutLibraries'
    description = 'Plugin to resolve all libraries used in an app for the AboutLibraries library to offer relevant information of used libraries.'
    tags = ['gradle', 'plugin', 'android']

    plugins {
        aboutLibrariesPlugin {
            id = "${project.group}"
            displayName = 'AboutLibraries Library Gradle Plugin'
        }
    }
}

repositories {
    google()
    jcenter()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation "com.android.tools.build:gradle:4.0.0"
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.72'
}

compileGroovy {
    dependsOn tasks.getByPath('compileKotlin')
    classpath += files(compileKotlin.destinationDir)
}

processResources {
    from("../library-definitions/src/main/res/raw/") {
        into 'static'
    }
    from("../library-definitions/src/main/res/values/") {
        into 'values'
    }
}

// generate zip file for android maven release tool
task packageFiles(type: Zip, dependsOn: 'uploadArchives') {
    def groupDir = rootProject.group.replaceAll('\\.', '/')
    from("../repo/$groupDir/$rootProject.name/$rootProject.version/")
}

apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('/tmp/sample'))
        }
    }
}

bintray {
    dryRun = false
    publish = true
    override = true
    user = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintray.apikey') ? project.property('bintray.apikey') : System.getenv('BINTRAY_API_KEY')
    def gpgkey = project.hasProperty('bintray.gpg.key') ? project.property('bintray.gpg.key') : System.getenv('BINTRAY_GPG_KEY')
    def gpgpass = project.hasProperty('bintray.gpg.password') ? project.property('bintray.gpg.password') : System.getenv('BINTRAY_GPG_PASS')
    def versionName = project.version

    pkg {
        publish = true
        repo = 'gradle-plugins'
        userOrg = 'mikepenz'
        name = "${project.group}:${project.name}" //the name (= identifier) on bintray
        version {
            name = versionName
            vcsTag = versionName
            released = new Date()

            mavenCentralSync {
                sync = false
                user = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
                password = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
            }
            gpg {
                sign = true
                passphrase = gpgpass
            }
        }
    }
    publish = false
}
